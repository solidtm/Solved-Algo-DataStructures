Various interviewers have asked the following questions listed below:

Which sorting algorithm will you use to solve the following sorting problems?
1. Sort 10 schools around your house by distance:
    Answer ==> Insertion sort because  it is really fast on small sorts and easy to code and has space complexity of O(1).

2. Ebay sorts listings on their website by the current bid amount
    Answer ==> Radix or counting sort will be great for this because a bid is usually a number between $1 to $50,000 or even less
    and since we have that range of numbers, radix or counting sort can be very efficient here because it's a fixed length of integers.
    It has time complexity of O(n).

3. Sort scores on ESPN
    Answer ==> Sport scores can vary, there is decimal places sometimes, there is different formats and different sports scores to handle.
    In this case Quick sort will be the best because we can worry about using extra space in using merge sort

4. Massive database (can't fill all into memory) needs to sort through past year's user data
    Answer ==> Obviously, Merge sort will be very good to use here, as we are not concerned with memory as all the data cannot fit in memory,
    what we can be really concerned with here could be the performance, and I want to make sure i cna get O(nlogn) time complexity.

5. Almost sorted Udemy review data needs to update and add 2 new reviews
    Answer ==> Here I would use Insertion sort because the data is almost sorted. Insertion sort performs really fast on almost sorted data,
    even though the data might be huge, I am assuming that the previous data is almost sorted, and I am adding only 2 new reviews to this data.

6. Temperature records for the past 50 years in Canada
    Answer ==> First I would use something like radix or counting sort if the records have no decimals or is an integer number between a small range.
    But if the case is data that contains decimal values, then I will probably need to use Quick sort again, so we can do some in memory sorting and save
    space.

7. Large username database needs to be sorted. Data is very random
    Answer ==> Since the data is very random, there isn't enough information to make a decision here, maybe I will use Merge sort if I have enough memory
    and memory is cheap. Or maybe I will use Quick Sort if I am not too worried about worst case, and the username database is not very large, just to save
    that memory space.

8. You want to teach sorting for the first time
    Answer ==> Obviously this would be bubble sort and selection sort, because it is the first thing that comes to mid for every individual and mostly used
    for teaching the basic concepts of sorting.

9. Note ==> Java JDK uses 2 sort algorithms in the Arrays.sort() method:
     1. Quick sort: Used to sort arrays of primitive values --> this is because stability does not matter here and there is no way to distinguish 2 ints with same value.
     2. Merge sort: Used to sort arrays of Objects --> this is because objects can hae pointers and will need a stable algorithm like merge sort
   Note ==> You want to use Quick sort when your average case matter more than the worst case
            Merge sort on the other hand is great because it has O(nlogn) guaranteed and is stable (preserves natural ordering)
            although the space complexity is a little higher than Quick sort, it is a great sort algorithm to use.
            Bubble, Selection and Insertion sorts are used for small and quick sorts.

//   The same is obtainable in Kotlin language too.












